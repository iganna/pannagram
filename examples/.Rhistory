if (length(idx.p) > 0) {
idx.tmp = idx.p[1]
s = seqs[idx.tmp]
s.nt = seq2nt(s)
g = dotplot(s.nt, s.nt, 15, 13) + ggtitle(paste(names(seqs)[idx.tmp],
';p=', round(seqs.score[idx.p[1]], 2), sep = ''))
g.list[[length(g.list) + 1]] = g
}
}
p.combo <- plot_grid(plotlist = g.list, nrow = 2)
p.combo
path.figures = 'figures/'
pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 4)
print(p.combo)
dev.off()
p.combo
pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
print(p.combo)
dev.off()
p.step = 0.1
g.list = list()
for(p in seq(0, (1-p.step), p.step)){
pokaz(p)
idx.p = which((seqs.score >= p) & (seqs.score < (p + p.step)))
if (length(idx.p) > 0) {
idx.tmp = idx.p[1]
s = seqs[idx.tmp]
s.nt = seq2nt(s)
g = dotplot(s.nt, s.nt, 15, 13) + ggtitle(paste(straplit(names(seqs)[idx.tmp], '\\|'][[1]][4],
p.step = 0.1
g.list = list()
for(p in seq(0, (1-p.step), p.step)){
pokaz(p)
idx.p = which((seqs.score >= p) & (seqs.score < (p + p.step)))
if (length(idx.p) > 0) {
idx.tmp = idx.p[1]
s = seqs[idx.tmp]
s.nt = seq2nt(s)
g = dotplot(s.nt, s.nt, 15, 13) + ggtitle(paste(straplit(names(seqs)[idx.tmp], '\\|')[[1]][4],
';p=', round(seqs.score[idx.p[1]], 2), sep = ''))
g.list[[length(g.list) + 1]] = g
}
}
p.step = 0.1
g.list = list()
for(p in seq(0, (1-p.step), p.step)){
pokaz(p)
idx.p = which((seqs.score >= p) & (seqs.score < (p + p.step)))
if (length(idx.p) > 0) {
idx.tmp = idx.p[1]
s = seqs[idx.tmp]
s.nt = seq2nt(s)
g = dotplot(s.nt, s.nt, 15, 13) + ggtitle(paste(strsplit(names(seqs)[idx.tmp], '\\|')[[1]][4],
';p=', round(seqs.score[idx.p[1]], 2), sep = ''))
g.list[[length(g.list) + 1]] = g
}
}
p.combo <- plot_grid(plotlist = g.list, nrow = 2)
p.combo
file.fig = paste(path.figures, 'different_cutoffs.pdf', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = path_to_save_png, width = 16, height = 8, units = 'in', res = 300)
file.fig = paste(path.figures, 'different_cutoffs.pdf', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
file.fig = paste(path.figures, 'different_cutoffs.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
p.step = 0.1
g.list = list()
for(p in seq(0, (1-p.step), p.step)){
pokaz(p)
idx.p = which((seqs.score >= p) & (seqs.score < (p + p.step)))
if (length(idx.p) > 0) {
idx.tmp = idx.p[1]
s = seqs[idx.tmp]
s.nt = seq2nt(s)
g = dotplot(s.nt, s.nt, 15, 13) + ggtitle(paste('pos=', strsplit(names(seqs)[idx.tmp], '\\|')[[1]][4],
';p=', round(seqs.score[idx.p[1]], 2), sep = ''))
g.list[[length(g.list) + 1]] = g
}
}
p.combo <- plot_grid(plotlist = g.list, nrow = 2)
p.combo
file.fig = paste(path.figures, 'different_cutoffs.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
files <- list.files(path = 'data/',pattern = "11B21_.+_maj\\.rds")
files
i = 1
j = 1
x = readRDS(paste('data/',acc, '_', i, '_', j, '_maj.rds', sep = ''))
acc = '11B21'
x = readRDS(paste('data/',acc, '_', i, '_', j, '_maj.rds', sep = ''))
plotDot(x)
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
x = readRDS(paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = ''))
p.list[[length(p.list) + 1]] =  plotDot(x)
}
}
x = readRDS(paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = ''))
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
f = paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = '')
if(!file.exists(f)) next
x = readRDS(f)
p.list[[length(p.list) + 1]] =  plotDot(x) + ggtitle(paste(j, '_', i, sep = ''))
}
}
length(p.list)
p.combo <- plot_grid(plotlist = g.list, nrow = 5)
p.combo
p.combo <- plot_grid(plotlist = p.list, nrow = 5)
p.combo
plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)
files <- list.files(path = 'data/',pattern = "11B21_.+_maj\\.rds")
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
f = paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = '')
if(!file.exists(f)) next
x = readRDS(f)
p.list[[length(p.list) + 1]] =  plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)
}
}
p.combo <- plot_grid(plotlist = p.list, nrow = 5)
p.combo
file.fig = paste(path.figures, 'lyrata.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
ggplot() + theme_void()
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
f = paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = '')
if(!file.exists(f)) {
p.list[[length(p.list) + 1]] =  ggplot() + theme_void()
next
}
x = readRDS(f)
p.list[[length(p.list) + 1]] =  plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)
}
}
p.combo <- plot_grid(plotlist = p.list, nrow = 5)
p.combo
file.fig = paste(path.figures, 'lyrata.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)+
scale_y_continuous(breaks = seq.lab* 1e6, labels = seq.lab )
seq.lab =  seq(0, 40, by = 5 )
plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)+
scale_y_continuous(breaks = seq.lab* 1e6, labels = seq.lab )
library(ggplot2)
#' ----------------------------------------------------------------------
#' Plot Synteny Between Two Genomic Regions
#'
#' This function generates a ggplot2-based visualization of synteny in the alignment.
#' Synteny blocks are displayed as segments.
#'
#' @param x A data frame representing the alignment. Must contain columns `V2`, `V3`, `V4`, and `V5`.
#' (`V2`, `V3`) - begin-end positions in a query sequence
#' (`V4`, `V5`) - begin-end positions in a reference sequence
#'
#' @param base.len Numeric length of the reference sequence.
#' If provided, the reference coordinated in `x` will be processed with the `getBase` function.
#'
#' @param hlines Numeric vector. Y-coordinates at which horizontal lines should be drawn. Default is `NULL`.
#' @param vlines Numeric vector. X-coordinates at which vertical lines should be drawn. Default is `NULL`.
#' @param col.fw Color for forward-oriented synteny blocks. Default is '#27374D'.
#' @param col.rc Color for reverse-complement synteny blocks. Default is '#CE1F6A'.
#' @param col.line Color for the optional horizontal and vertical lines. Default is '#362FD9'.
#'
#' @return A `ggplot2` plot object.
#'
#' @examples
#' \dontrun{
#' data <- data.frame(V2 = c(1, 4), V3 = c(3, 5), V4 = c(1, 2), V5 = c(3, 4))
#' plotSynteny(data)
#' }
#'
#' @import ggplot2
#' @export
plotSynteny <- function(x, base.len = NULL, hlines=NULL, vlines=NULL,
col.fw = '#27374D',
col.rc = '#CE1F6A',
col.line = '#362FD9'){
if(!is.null(base.len)){
x = getBase(x, base.len)
}
seq.lab =  seq(0, 40, by = 5 )
p <- ggplot(x, aes(x = V2, y=V4, xend = V3, yend = V5, color = as.factor(V4 < V5))) +
# geom_point(show.legend = FALSE, size = 0.1) +
geom_segment(show.legend = FALSE) +
theme_bw() +
xlab('query') +
ylab('base') +
scale_color_manual(values = c("FALSE" = col.rc, "TRUE" = col.fw)) +
coord_fixed(ratio = 1) +
scale_y_continuous(breaks = seq.lab* 1e6, labels = seq.lab ) +
scale_x_continuous(breaks = seq.lab* 1e6, labels = seq.lab )
if(!is.null(hlines)){
p <- p + geom_hline(yintercept=hlines, color= col.line)
}
if(!is.null(vlines)){
p <- p + geom_vline(xintercept=vlines, color = col.line)
}
return(p)
}
plotDot <- function(..., alpha = 1) {
p = plotSynteny(...) + geom_point(show.legend = FALSE, size = 1, alpha = alpha)
return(p)
}
#' ----------------------------------------------------------------------
#' Plot Synteny Blocks Between Two Genomic Regions (Alias for \code{\link{plotSynteny}})
#'
#' This function is an alias for the \code{\link{plotSynteny}} function and
#' generates a ggplot2-based visualization of synteny in the alignment.
#'
plotSyntenyBlocks <- function(...) {
plotSynteny(...)
}
#' ----------------------------------------------------------------------
plotPanAcc <- function(file.msa, acc){
# Setup
gr.accs.e <- "accs/"
axis.breaks = seq(0, 30, by = 5)
idx.step = 10000
idx = seq(1, pan.len, idx.step)
c.red = '#872341'
c.grey = '#EBEBEB'
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord, Mbp",
y = paste(acc, ', Mbp', sep = ''),
title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks) +
scale_x_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks)
return(p)
}
plotDot(x)
files <- list.files(path = 'data/',pattern = "11B21_.+_maj\\.rds")
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
f = paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = '')
if(!file.exists(f)) {
p.list[[length(p.list) + 1]] =  ggplot() + theme_void()
next
}
x = readRDS(f)
seq.lab =  seq(0, 40, by = 5 )
p.list[[length(p.list) + 1]] =  plotDot(x) + ggtitle(paste(j, '_', i, sep = ''))
}
}
p.combo <- plot_grid(plotlist = p.list, nrow = 5)
p.combo
file.fig = paste(path.figures, 'lyrata.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
files <- list.files(path = 'data/',pattern = "11B21_.+_maj\\.rds")
acc = '11B21'
p.list = list()
for(i in 1:5){
for(j in 1:8){
f = paste('data/',acc, '_', j, '_', i, '_maj.rds', sep = '')
if(!file.exists(f)) {
p.list[[length(p.list) + 1]] =  ggplot() + theme_void()
next
}
x = readRDS(f)
seq.lab =  seq(0, 40, by = 5 )
p.list[[length(p.list) + 1]] =  plotDot(x) + ggtitle(paste(j, '_', i, sep = '')) + xlab(NULL) + ylab(NULL)
}
}
p.combo <- plot_grid(plotlist = p.list, nrow = 5)
p.combo
file.fig = paste(path.figures, 'lyrata.png', sep = '')
# pdf(paste(path.figures, 'different_cutoffs.pdf', sep = ''), width = 16, height = 8)
png(filename = file.fig, width = 16, height = 8, units = 'in', res = 300)
print(p.combo)
dev.off()
3 / 28
(1:28) < 0.15 * 28
(1:28) < 0.10 * 28
(1:28) < 0.11 * 28
plot(seqs.score)
p <- ggplot(data.frame(x = 1:length(seqs.score), y = seqs.score), aes(x = x, y = y)) +
geom_point() +
theme_minimal()
p
plot(seqs.score)
p <- ggplot(data.frame(x = 1:length(seqs.score), y = seqs.score), aes(x = x, y = y)) +
geom_point() +
theme_minimal()  + ylab('Score') + xlab('5000 kb window') + ggtitle('lytara, chr1')
p
plot(seqs.score)
p <- ggplot(data.frame(x = 1:length(seqs.score), y = seqs.score), aes(x = x, y = y)) +
geom_point() +
theme_minimal()  + ylab('Score') + xlab('5000 kb window') + ggtitle('Lytara, chr1')
p
p <- ggplot(data.frame(x = 1:length(seqs.score), y = sort(seqs.score)), aes(x = x, y = y)) +
geom_point() +
theme_minimal()  + ylab('Score') + xlab('Sorted windows') + ggtitle('Lytara, chr1')
p
v.acc = h5read(file.comb, paste(gr.accs.e, acc, sep = ''))
length(setdiff(tmp, v[,sub('acc_', '', acc)]))
s = c('424.v1.1.fasta', '5772.v1.1.fasta', '6909.v1.1.fasta', '6997.v1.1.fasta', '7319.v1.1.fasta', '8239.v1.1.fasta', '9738.v1.1.fasta')
files.query = s
query.type = 'fasta'
gsub(paste0('*.', query.type, collapse = ''), "" ,files.query)
pokaz()
pokaz('aaaa', c(1,2,3,3))
pokazAttention('aaaa', c(1,2,3,3))
pokazAttention <- function(...) {
arguments_list <- list(...)
# Check if any arguments are vectors
for (i in seq_along(arguments_list)) {
if (is.character(arguments_list[[i]]) && length(arguments_list[[i]]) > 1) {
arguments_list[[i]] <- paste(arguments_list[[i]], collapse = " ")
}
}
arguments <- paste('  Attention:', paste(arguments_list, collapse = " "), sep = '')
text.color <- make_style("#FC345C")
# bg <- make_style("grey5", bg = TRUE)
fancy <- combine_styles(text.color)
# message(arguments)
cat(fancy(arguments))
cat('\n')
}
pokazAttention('aaaa', c(1,2,3,3))
pokazStage <- function(...) {
arguments_list <- list(...)
# Check if any arguments are vectors
for (i in seq_along(arguments_list)) {
if (is.character(arguments_list[[i]]) && length(arguments_list[[i]]) > 1) {
arguments_list[[i]] <- paste(arguments_list[[i]], collapse = " ")
}
}
arguments <- paste('*', paste(arguments_list, collapse = " "), sep = '')
text.color <- make_style("#34FCFC")
# bg <- make_style("grey5", bg = TRUE)
fancy <- combine_styles(text.color)
# message(arguments)
cat(fancy(arguments))
cat('\n')
}
pokazStage <- function(...) {
arguments_list <- list(...)
# Check if any arguments are vectors
for (i in seq_along(arguments_list)) {
if (is.character(arguments_list[[i]]) && length(arguments_list[[i]]) > 1) {
arguments_list[[i]] <- paste(arguments_list[[i]], collapse = " ")
}
}
arguments <- paste('*', paste(arguments_list, collapse = " "), sep = '')
text.color <- make_style("#34FCFC")
# bg <- make_style("grey5", bg = TRUE)
fancy <- combine_styles(text.color)
# message(arguments)
cat(fancy(arguments))
cat('\n')
}
pokazStage('aaa')
as.numeric(3)
files <- c("A9_1_1_full.rds", "CA104_1_1_full.rds", "CA107_1_1_full.rds", "CA67_1_1_full.rds", "CA78_1_1_full.rds", "CA85_1_1_full.rds", "ref_1021_1_1_full.rds", "SB081_1_1_full.rds", "AK57_1_1_full.rds", "CA105_1_1_full.rds", "CA52_1_1_full.rds", "CA72_1_1_full.rds", "CA83_1_1_full.rds", "R11_1_1_full.rds", "SB021_1_1_full.rds", "SB151_1_1_full.rds")
# Функция для извлечения NAME, X и Y
extract_components <- function(filename) {
# Разделить имя файла по первым двум подчёркиваниям
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
# Извлечь NAME, X и Y
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
x <- parts[length(parts) - 2]
y <- parts[length(parts) - 1]
# Вернуть результат в виде списка
return(list(NAME = name, X = x, Y = y))
}
# Применить функцию к каждому файлу
result <- lapply(files, extract_components)
result
files <- c("A9_1_1_full.rds", "CA104_1_1_full.rds", "CA107_1_1_full.rds", "CA67_1_1_full.rds", "CA78_1_1_full.rds", "CA85_1_1_full.rds", "ref_1021_1_1_full.rds", "SB081_1_1_full.rds", "AK57_1_1_full.rds", "CA105_1_1_full.rds", "CA52_1_1_full.rds", "CA72_1_1_full.rds", "CA83_1_1_full.rds", "R11_1_1_full.rds", "SB021_1_1_full.rds", "SB151_1_1_full.rds")
# Функция для извлечения NAME, X и Y
extract_components <- function(filename) {
# Разделить имя файла по первым двум подчёркиваниям
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
# Извлечь NAME, X и Y
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
x <- parts[length(parts) - 2]
y <- parts[length(parts) - 1]
# Вернуть результат в виде списка
return(data.frame(NAME = name, X = x, Y = y))
}
# Применить функцию к каждому файлу
result <- lapply(files, extract_components)
result
accessions <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
# Извлечь NAME, X и Y
name <- paste(parts[1:(length(parts) - 3)], collapse = "_") })
accessions
accessions <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
rerun(name)})
accessions <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
return(name)})
accessions
accessions <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
return(name)})
names(accessions) = NULL
accessions
pref.combinations <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- paste(parts[length(parts) - 2], '_' ,parts[length(parts) - 1])
return(s.comb)})
pref.combinations
pref.combinations <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- paste(parts[length(parts) - 2], '_' ,parts[length(parts) - 1], sep = '')
return(s.comb)})
pref.combinations
pref.combinations <- unique(sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- paste(parts[length(parts) - 2], '_' ,parts[length(parts) - 1], sep = '')
return(s.comb)}))
pref.combinations
accessions <- sapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
name <- paste(parts[1:(length(parts) - 3)], collapse = "_")
return(name)})
names(accessions) = NULL
pref.combinations <- unique(lapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- c(paste(parts[length(parts) - 2],parts[length(parts) - 1])
return(s.comb)}))
pref.combinations <- lapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- c(paste(parts[length(parts) - 2],parts[length(parts) - 1])
return(s.comb)})
pref.combinations <- lapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- c(parts[length(parts) - 2],parts[length(parts) - 1])
return(s.comb)})
pref.combinations
pref.combinations <- do.call(rbind, lapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- c(parts[length(parts) - 2],parts[length(parts) - 1])
return(s.comb)}))
pref.combinations
pref.combinations <- do.call(rbind, lapply(files, function(filename){
parts <- unlist(strsplit(filename, "_", fixed = TRUE))
s.comb <- c(as.numeric(parts[length(parts) - 2]),
as.numeric(parts[length(parts) - 1]))
return(s.comb)}))
pref.combinations
idx <- c(1, 2, 3, 5, 6, 10, 11, 12) # Пример вектора
# Находим различия между последовательными элементами
diffs <- c(1, diff(idx))
# Определяем начала и концы блоков
block_starts <- idx[diffs != 1]
block_ends <- c(idx[which(diffs != 1) - 1], tail(idx, 1))
# Создаем фрейм данных
blocks <- data.frame(beg = block_starts,
end = block_ends,
len = block_ends - block_starts + 1)
block_starts
s=  'AAAAAAAAAATGTCCCAAGGGTTGCGTAATTGCGTTTCGTTCCTCCTTTCACCGGTCCATTTTGTCAACATCATGTTTCATTGTGTTTTGTTGATTTTTTTTGGTCATATGGTCCTATGAGTGACGTAATACATGAGGTGGACACATATTATTATATACACATGAAATATAGAGTTTGATTGAGAACTTTCTTGTCTATTATCTAAAATCTTTCGTAAAGTTAACGATCACAATGACCACAAACTTCAACGTACGTAAGTTT'
s = seq2nt(AAAAAAAAAATGTCCCAAGGGTTGCGTAATTGCGTTTCGTTCCTCCTTTCACCGGTCCATTTTGTCAACATCATGTTTCATTGTGTTTTGTTGATTTTTTTTGGTCATATGGTCCTATGAGTGACGTAATACATGAGGTGGACACATATTATTATATACACATGAAATATAGAGTTTGATTGAGAACTTTCTTGTCTATTATCTAAAATCTTTCGTAAAGTTAACGATCACAATGACCACAAACTTCAACGTACGTAAGTTT)
s = seqs2nt(s)
s = seq2nt(s)
dotplot(s)
dotplot(s, s, 15, 13)
10 %% 5
10 %% 3
query.name = c('a', 'b', 'c')
n.chr = 10
combinations <- expand.grid(acc = query.name, i.chr = 1:n.chr)
combinations
nrow(combinations)
