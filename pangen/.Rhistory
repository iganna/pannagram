lines = c('anna', '#anna')
grepl("^#", lines)
x = read.table('../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921805.1_ASM3592180v1_1_2.txt', stringsAsFactors = F)
x = read.table('../../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921805.1_ASM3592180v1_1_2.txt', stringsAsFactors = F)
showt(x)
x$p.beg <- ifelse(x$V4 < x$V5, x$V4, x$V5)
x$p.end <- ifelse(x$V4 < x$V5, x$V5, x$V4)
start.pos = as.numeric(sapply(strsplit(x[,1], "\\|"), "[", 4)) - 1
x[,2:3] = x[,2:3] + start.pos
x$dir = (x$V4 > x$V5) * 1
View(x)
x$part.id = cumsum(c(T, diff(as.numeric(as.factor(x$V1))) != 0))
idx.maj = which(!c(F, x$V1[-1] == x$V1[-nrow(x)]))
x.major = cbind(x[idx.maj,setdiff(colnames(x), c('V8', 'V9'))], idx.maj)
x.major = x.major[order(x.major$V2),]  # not needed
x.major$id = 1:nrow(x.major)
x.major = x.major[order(-x.major$V7),]
x.major = x.major[order(x.major$p.beg),]
x.major
idx.overlap = which(x.major$p.end[-1] <= x.major$p.end[-nrow(x.major)]) + 1
if(length(idx.overlap) > 0){
x.major = x.major[-idx.overlap,]
}
x.major$id = rank(x.major$id)
idx = which(abs(diff(x.major$id)) > 1)
idx = intersect(idx, idx + 1)
if(length(idx) > 0){
x.major = x.major[-idx,]
}
x.major
# re-arrange IDs
x.major$id = rank(x.major$id)
# [1 or 0] - [begin or end] of block
x.major$block = c(1, abs(x.major$id[-1] - x.major$id[-nrow(x.major)]) != 1)
# block ID
x.major$block.id = cumsum(x.major$block)
# Analyse only beginnings of blocks
x.block = x.major[x.major$block == 1,]
x.block$id = rank(x.block$id)
bl.len = abs(tapply(x.major$p.end, x.major$block.id, max) - tapply(x.major$p.beg, x.major$block.id, min))
bl.len = bl.len[order(as.numeric(names(bl.len)))]
x.block$len = bl.len
# Remain blocks, only if they are in a correct place and long enough
while(T){
x.block$id = rank(x.block$id)
idx = which(abs(diff(x.block$id)) > 1)
idx = unique(c(idx, idx + 1))
idx = idx[idx < nrow(x.block)]
# idx = intersect(idx, idx +1)
if(length(idx) == 0) break
if(min(x.block$len[idx]) > 20000) break
idx.remove = idx[x.block$len[idx] == min(x.block$len[idx])][1]
if(echo) pokaz('- Remove block', idx.remove, ';length:', x.block$len[idx.remove])
x.block = x.block[-idx.remove,]
# rownames(x.block) = NULL
}
echo = T
while(T){
x.block$id = rank(x.block$id)
idx = which(abs(diff(x.block$id)) > 1)
idx = unique(c(idx, idx + 1))
idx = idx[idx < nrow(x.block)]
# idx = intersect(idx, idx +1)
if(length(idx) == 0) break
if(min(x.block$len[idx]) > 20000) break
idx.remove = idx[x.block$len[idx] == min(x.block$len[idx])][1]
if(echo) pokaz('- Remove block', idx.remove, ';length:', x.block$len[idx.remove])
x.block = x.block[-idx.remove,]
# rownames(x.block) = NULL
}
source('../synteny_funcs.R')
source('synteny_funcs.R')
source('../utils/utils.R')
while(T){
x.block$id = rank(x.block$id)
idx = which(abs(diff(x.block$id)) > 1)
idx = unique(c(idx, idx + 1))
idx = idx[idx < nrow(x.block)]
# idx = intersect(idx, idx +1)
if(length(idx) == 0) break
if(min(x.block$len[idx]) > 20000) break
idx.remove = idx[x.block$len[idx] == min(x.block$len[idx])][1]
if(echo) pokaz('- Remove block', idx.remove, ';length:', x.block$len[idx.remove])
x.block = x.block[-idx.remove,]
# rownames(x.block) = NULL
}
if(is.unsorted(x.major$p.beg)) pokazAttention('1!!')
remain.block = x.block$block.id
if(length(remain.block) > 0){
x.major = x.major[x.major$block.id %in% remain.block,]
}
x.major
# Check remained blocks
x.major$id = rank(x.major$id)
x.major$block = c(1, abs(x.major$id[-1] - x.major$id[-nrow(x.major)]) != 1)
x.major$block = x.major$block + c(1, abs(x.major$dir[-1] != x.major$dir[-nrow(x.major)]))
x.major$block = (x.major$block > 0) * 1
x.major$block.id = cumsum(x.major$block)  # block ID
if(length(unique((x.major$dir))) > 1){  # different dirertions exist
cnt = table(x.major$block.id, x.major$dir)
if(echo) print(cnt)
if(sum(cnt[,1] * cnt[,2]) != 0) stop('Blocks in x.major are wrongly defined')
}
# ---- Filtration ----
x = x[x.major$idx.maj,]
x$block.id = x.major$block.id
View(x)
for(i.tmp in 1:2){
x = cleanBigOverlaps(x)
x = cutSmallOverlaps(x)
}
path.base = '../../pannagram_test/pushkin/PRJNA1049504/'
base.file = 'GCA_035920505.1_ASM3592050v1_chr1.fasta'
query.file = 'GCA_035921805.1_ASM3592180v1_chr1.fasta'
# Read reference sequences
base.file = paste0(base.acc, '_chr', base.chr , '.', 'fasta', collapse = '')
if(echo) pokaz('Base:', base.file)
base.fas.fw = readFastaMy(paste(path.base, base.file, sep = ''))
path.base = '../../pannagram_test/pushkin/out_PRJNA1049504/chromosomes/'
if(echo) pokaz('Base:', base.file)
base.fas.fw = readFastaMy(paste(path.base, base.file, sep = ''))
base.fas.fw = seq2nt(base.fas.fw)
base.fas.bw = revCompl(base.fas.fw)
base.len = length(base.fas.bw)
if(echo) pokaz('Length of base:', base.len)
query.fas.chr = readFastaMy(paste(path.query, query.file, sep = ''))
path.query = '../../pannagram_test/pushkin/out_PRJNA1049504/chromosomes/'
query.fas.chr = readFastaMy(paste(path.query, query.file, sep = ''))
query.fas.chr = seq2nt(query.fas.chr)
query.len = length(query.fas.chr)
if(echo) pokaz('Length of query:', query.len)
query.file
query.file = 'GCA_035921805.1_ASM3592180v1_chr2.fasta'
query.fas.chr = readFastaMy(paste(path.query, query.file, sep = ''))
query.fas.chr = seq2nt(query.fas.chr)
query.len = length(query.fas.chr)
if(echo) pokaz('Length of query:', query.len)
file.aln.pre
path.blast.res
x = read.table('../../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921805.1_ASM3592180v1_1_2.txt', stringsAsFactors = F)
if(echo) pokaz('Read blast results finished, numer of rows is', nrow(x))
## ---- Pre-processing ----
# Save true base coordinate
x$p.beg <- ifelse(x$V4 < x$V5, x$V4, x$V5)
x$p.end <- ifelse(x$V4 < x$V5, x$V5, x$V4)
# Set correct position
start.pos = as.numeric(sapply(strsplit(x[,1], "\\|"), "[", 4)) - 1
x[,2:3] = x[,2:3] + start.pos
# Chech - could be removed:
x.dir = setDir(x, base.len = base.len)
checkCorrespToGenome(x.dir, query.fas = query.fas.chr,
base.fas.fw = base.fas.fw,
base.fas.bw = base.fas.bw)
x[1,]
query.fas.chr[46605:46721]
query.file
query.fas.chr[1:10]
query.fas.chr[45001:(45001+10)]
x = read.table('../../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921805.1_ASM3592180v1_1_2.txt', stringsAsFactors = F)
if(echo) pokaz('Read blast results finished, numer of rows is', nrow(x))
## ---- Pre-processing ----
# Save true base coordinate
x$p.beg <- ifelse(x$V4 < x$V5, x$V4, x$V5)
x$p.end <- ifelse(x$V4 < x$V5, x$V5, x$V4)
View(x)
query.fas.chr[(1605:1721) + 45001]
query.fas.chr[(1605:1721) + 45001 - 1]
x = read.table('../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921825.1_ASM3592182v1_7_1.txt')
readTableMy <- function(file, ...) {
if (any(grepl("^[^#]", readLines(file)))) {
return(do.call(read.table, list(file, ...)))
} else {
return(NULL)
}
}
readTableMy('../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921825.1_ASM3592182v1_7_1.txt')
file = '../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921825.1_ASM3592182v1_7_1.txt'
readLines(file)
file = '../../pannagram_test/pushkin/out_PRJNA1049504/blast_parts_GCA_035920505.1_ASM3592050v1/GCA_035921825.1_ASM3592182v1_7_1.txt'
readLines(file)
readTableMy(file = )
readTableMy(file)
readTableMy <- function(file) {
if (any(grepl("^[^#]", readLines(file)))) {
return(read.table(file, stringsAsFactors = F))
} else {
return(NULL)
}
}
4157000 * 2
