gff$id = sapply(gff$V9, function(s){
res = strsplit(s, ';')[[1]]
res = paste0(res[1:3], collapse = '|')
res = gsub('ID=', '', res)
res = gsub('Name=', '', res)
res = gsub('Classification=', '', res)
return(res)
}  )
gff = gff[gff$V3 != 'repeat_region',]
gff = gff[gff$V3 != 'satellite_DNA',]
idx.contains <- grepl("Parent", gff$V9)
gff = gff[!idx.contains,]
idx.contains <- grepl("rDNA", gff$V9)
gff = gff[!idx.contains,]
# Remove very long hits
len.max = 50000
gff = gff[(gff$V5 - gff$V4 + 1) <= len.max,]
# Result
pokaz('Number of hits:', nrow(gff))
# Sorting
rownames(gff) = NULL
gff$idx.sort = 1:nrow(gff)
gff = gff[order(gff$V5),]
gff = gff[order(gff$V4),]
gff = gff[order(gff$V1),]
is.unsorted(gff$idx.sort)
which(diff(gff$idx.sort) != 1)
gff$idx.sort = NULL
unique(gff$V3)
idx.LTR <- grep("LTR", gff$V3)
gff = gff[idx.LTR,]
genome = readFastaMy(file.genome)
pokaz('Chromosome lengths:', unname(nchar(genome)))
seqs.all = c()
for(i.chr in 1:5){
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
seqs = c()
for(irow in 1:nrow(gff.chr)){
seqs[irow] = nt2seq(s.chr[gff.chr$V4[irow]:gff.chr$V5[irow]])
}
names(seqs) = paste(gff.chr$id, gff.chr$V1,sep = '|')
names(seqs) = gff.chr$id
seqs.all = c(seqs.all, seqs)
}
# writeFastaMy(seqs.all, '../data/te_tair12_filter.fasta')
gff$dist = c(gff$V4[-1] - gff$V5[-nrow(gff)], 0)
# Distances between Chromosomes set to Inf
gff$dist[which(gff$V1[-1] != gff$V1[-nrow(gff)])] = Inf
# Number of overlapping hits
n.over = sum(gff$dist < 0)
pokaz('Number of overlaps:', n.over)
idx.over = head(which(gff$dist < 0))
# Check some overlaps
i.over = idx.over[2]
gff[i.over+c(-2:2),]
p = ggplot(gff, aes(x = dist)) +
geom_histogram(binwidth = 500, fill = "blue", color = "black") +
labs(title = "Distance between hist", x = "dist", y = "freq") +
theme_minimal()  + xlim(c(1, 10000))
p
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
seqs.merge = c(seqs.merge, seqs)
}
# Show for testing
# gff.chr[i.merge + (-1:1),]
hist(nchar(seqs.merge), 10)
# Names
idx.merge = which(gff$dist <= len.gap)
names(seqs.merge) = paste0('te_merge',1:length(seqs.merge), '|',
gff$V1[idx.merge],'|',
gff$V4[idx.merge],'|',
gff$V5[idx.merge+1],'|',
nchar(seqs.merge))
length(seqs.merge)
length(idx.merge)
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
# Names
names(seqs) = paste0('te_merge',1:length(seqs), '|',
gff$V1[idx.merge],'|',
gff$V4[idx.merge],'|',
gff$V5[idx.merge+1],'|',
nchar(seqs.merge))
seqs.merge = c(seqs.merge, seqs)
}
length(seqs)
names(seqs) = paste0('te_merge',1:length(seqs), '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs.merge))
length(idx.merge)
# Names
names(seqs) = paste0('te_merge',1:length(seqs), '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs))
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
# Names
names(seqs) = paste0('te_merge',1:length(seqs), '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs))
seqs.merge = c(seqs.merge, seqs)
}
# Show for testing
# gff.chr[i.merge + (-1:1),]
hist(nchar(seqs.merge), 10)
writeFastaMy(seqs.merge, '../data/te_tair12_merged_ltr.fasta')
s.name = 'te_merge366|Chr5|12698151|12701345|3195'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
dotplot.s(seqs.merge['te_merge403|Chr5|14905900|14915521|9622'],
seqs.merge['te_merge405|Chr5|14915522|14925144|9623'], 15, 12)
s.name = 'te_merge919|Chr4|13699917|13705221|5305'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
head(gff)
gff$idx = 1:nrow(gff)
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
# Names
names(seqs) = paste0('te_merge|',
gff$idx[idx.merge], '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs))
seqs.merge = c(seqs.merge, seqs)
}
# Show for testing
# gff.chr[i.merge + (-1:1),]
hist(nchar(seqs.merge), 10)
writeFastaMy(seqs.merge, '../data/te_tair12_merged_ltr.fasta')
gff[12 + (-1:1),]
s.name = 'te_merge580|Chr5|15576477|15580129|3653'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
seqs.merge[s.name]
gff[1264 + (-1:1),]
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = seq2nt(genome[i.chr])
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
# Names
names(seqs) = paste0('te_merge|',
gff.chr$idx[idx.merge], '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs))
seqs.merge = c(seqs.merge, seqs)
}
# Show for testing
# gff.chr[i.merge + (-1:1),]
hist(nchar(seqs.merge), 10)
writeFastaMy(seqs.merge, '../data/te_tair12_merged_ltr.fasta')
i = 4218
gff[i + c(-1:1),]
17816897 - 17815958
17816897 - 17815958
17804954 - 17816037
i = 442
gff[i + c(-1:1),]
s.name = 'te_merge|3644|Chr3|13411883|13413770|1888'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
s.name = 'te_merge|3250|Chr3|12054938|12058585|3648'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
i = te_merge|3250|Chr3|12054938|12058585|3648
i = 3250
gff[i + c(-1:1),]
gff[i + c(-1:2),]
res = readTableMy('../data/out_ltr_90.cnt')
res = read.table('../data/out_ltr_90.cnt', row.names = 1, header = 1, stringsAsFactors = F)
read(res)
head(res)
res = res[order(rownames(res)),]
head(res)
res$id = sapply(rownames(res), function(s) strsplir(s, '\\|')[[1]][2])
res$id = sapply(rownames(res), function(s) strsplit(s, '\\|')[[1]][2])
res = res[order(res$id),]
head(res)
res$id = as.numeric(sapply(rownames(res), function(s) strsplit(s, '\\|')[[1]][2]))
res = res[order(res$id),]
head(res)
res = res[res$total != 1,]
head(res)
res$name = rownames(res)
irow = 1
jrow = 2
dotplot.s(seqs.merge[res$name[irow]],
seqs.merge[res$name[jrow]], 15, 12)
head(res)
gff$len = gff$V5 - gff$V4 + 1
gff[19:20,]
gff[res$id[irow]:res$id[jrow],-c(4,5,6,7,8)]
gff[res$id[irow]:res$id[jrow],-c(2,4,5,6,7,8)]
gff[res$id[irow]:res$id[jrow],-c(2,4,5,6,7,8,9)]
gff[res$id[irow]:res$id[jrow],-c(2,4,5,6,7,8,9, 10)]
gff[res$id[irow]:res$id[jrow],-c(2,4,5,6,7,8,9, 11)]
head(res, 10)
irow = 8
jrow = 9
dotplot.s(seqs.merge[res$name[irow]],
seqs.merge[res$name[jrow]], 15, 12)
gff[res$id[irow]:res$id[jrow],-c(2,4,5,6,7,8,9, 11)]
grep('a', 'A', 'AaAa')
grepl('a', 'A', 'AaAa')
gsub('a', 'A', 'AaAa')
gff$chr = as.numeric(gsub('Chr', '', gff$V1))
unique(gff$chr)
idxs = res$id
idxs
diffs <- c(1, diff(idxs))
group_ids <- cumsum(diffs != 1)
group_ids
groups <- split(ids, group_ids)
diffs <- c(1, diff(idxs))
group_ids <- cumsum(diffs != 1)
groups <- split(idxs, group_ids)
groups
i.gr = 1
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)]
j
i
gemole.list = list()
for(i.chr in 1:length(genome)){
gemole.list[[i.chr]] = seq2nt(genome[i.chr])
}
gr.tmp
paste0(gr.tmp, collapse = ',')
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(seqs))
s.name
s = gemole.list[[i.chr]][pos1:pos2]
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
s.name
nchar(s)
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
s
s.name
seqs.concat = c()
for(i.gr in 1:length(groups)){
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)]
pos1 = gff$V4[i]
pos2 = gff$V5[j]
i.chr = gff$chr[i]
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
seqs.concat[s.name] = s
}
head(names(seqs.concat))
k = 1
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
i.gr = 1
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)]
pos1 = gff$V4[i]
pos2 = gff$V5[j]
pos1
pos2
pos2 - pos1
gr.tmp
i
j
gff[i,]
gff[j,]
seqs.concat = c()
for(i.gr in 1:length(groups)){
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)] + 1
pos1 = gff$V4[i]
pos2 = gff$V5[j]
i.chr = gff$chr[i]
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
seqs.concat[s.name] = s
}
k = 1
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k = 2
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k = 3
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
names(seqs.concat)
k = 329
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k = 693
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
names(seqs.concat[k])
k = 411
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
names(seqs.concat[k])
orfs = orfFinder(seqs.concat[k])
orfplot(orfs$pos)
k.long = whihc(nchar(seqs.concat) > 4000)
k.long = which(nchar(seqs.concat) > 4000)
length(k.long)
head(k.long)
k = 10
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k = 13
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k.long
unname(k.long)
k = 15
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
seqs.concat = c()
for(i.gr in 1:length(groups)){
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)] + 1
pos1 = gff$V4[i] - 500
pos2 = gff$V5[j] + 500
i.chr = gff$chr[i]
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
seqs.concat[s.name] = s
}
k.long = which(nchar(seqs.concat) > 4000)
k = 15
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
seqs.concat = c()
for(i.gr in 1:length(groups)){
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)] + 1
pos1 = gff$V4[i] # - 500
pos2 = gff$V5[j] # + 500
i.chr = gff$chr[i]
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
seqs.concat[s.name] = s
}
k.long = which(nchar(seqs.concat) > 4000)
k = 15
head(k.long)
k.long = unname(which(nchar(seqs.concat) > 4000))
k.long
k = 16
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
k = 17
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
res = read.table('../data/out_ltr_90.cnt', row.names = 1, header = 1, stringsAsFactors = F)
res$id = as.numeric(sapply(rownames(res), function(s) strsplit(s, '\\|')[[1]][2]))
res$name = rownames(res)
# Remove singletons
res = res[res$total > 4,]
# Sort according to the initial gff
res = res[order(res$id),]
head(res, 10)
idxs = res$id
diffs <- c(1, diff(idxs))
group_ids <- cumsum(diffs != 1)
groups <- split(idxs, group_ids)
gemole.list = list()
for(i.chr in 1:length(genome)){
gemole.list[[i.chr]] = seq2nt(genome[i.chr])
}
seqs.concat = c()
for(i.gr in 1:length(groups)){
gr.tmp = groups[[i.gr]]
i = gr.tmp[1]
j = gr.tmp[length(gr.tmp)] + 1
pos1 = gff$V4[i] # - 500
pos2 = gff$V5[j] # + 500
i.chr = gff$chr[i]
s = nt2seq(gemole.list[[i.chr]][pos1:pos2])
s.name = paste0('te_concat|',
i, '-', j, '|',
'Chr',i.chr,'|',
pos1,'|',
pos2,'|',
nchar(s))
seqs.concat[s.name] = s
}
k.long = unname(which(nchar(seqs.concat) > 4000))
k = 17
dotplot.s(seqs.concat[k],
seqs.concat[k], 15, 12)
names(seqs.concat[k])
orfs = orfFinder(seqs.concat[k])
orfplot(orfs$pos)
