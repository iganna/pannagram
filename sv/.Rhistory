setwd("~/Library/CloudStorage/OneDrive-Personal/vienn/pacbio/pannagram/sv")
# Создайте вектор строк
vector_of_strings <- c("This|is|the|first|example", "Another|line|with|multiple|pipes", "Last|string|with|a|single|pipe")
# Извлеките последние части после последней вертикальной черты
last_parts <- sub(".+\\|", "", vector_of_strings)
# Выведите результат
print(last_parts)
path.pannagram = '../../pannagram/'
source(paste(path.pannagram, 'utils.R', sep = ''))
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
library(ggplot2)
library(rhdf5)
path.pannagram = '../../pannagram/'
source(paste(path.pannagram, 'utils.R', sep = ''))
path.work = '../../work/004_test_pan/data_greg/'
path.annot = paste(path.work, 'annotation', sep = '')
path.cons = paste(path.work, 'consensus', sep = '')
path.out = paste(path.work, 'out', sep = '')
if (!dir.exists(path.out))  dir.create(path.out)  # Check if the directory exists
n.chr = 5
ref.acc = '0'
gr.accs.e <- "accs/"
gr.accs.b <- "/accs"
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
file.msa
path.work = '../../work/004_test_pan/data_greg/'
path.annot = paste(path.work, 'annotation/', sep = '')
path.cons = paste(path.work, 'consensus/', sep = '')
path.out = paste(path.work, 'out/', sep = '')
if (!dir.exists(path.out))  dir.create(path.out)  # Check if the directory exists
n.chr = 5
ref.acc = '0'
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
groups
accessions = groups$name[groups$group == gr.accs.b]
print(groups)
accessions
acc = '0'
groups
groups$dim
pan.len = groups$dim[groups$group == gr.accs.b][1]
pan.len
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) > 0) stop('Something is wrong in the alignment')
pan.len
if(length(pan.len) > 1) stop('Something is wrong in the alignment')
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
idx = seq(1, pan.len, 100000)
length(idx)
idx = seq(1, pan.len, 10000)
v.acc = h5read(file.comb, paste(gr.accs.e, acc, sep = ''))
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
p = ggplot(v.acc, aes(x = pan, y = acc)) +
geom_point() +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
p
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$pan != 0,]
p = ggplot(v.acc, aes(x = pan, y = acc)) +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
p
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = acc)) +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p
ggplot(v.acc, aes(x = pan, y = acc)) +
geom_point(size = 0.1) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
ggplot(v.acc, aes(x = pan, y = acc)) +
geom_point(size = 0.1) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
library(cowplot)
plot_grid(plotlist = p.list, ncol = 3)
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=sign(acc)) +
geom_point(size = 0.1) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
arranged_plots <- plot_grid(plotlist = p.list, ncol = 3)
arranged_plots
unique(as.factor(sign(acc)))
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
path.work = '../../work/004_test_pan/data_greg/'
path.annot = paste(path.work, 'annotation/', sep = '')
path.cons = paste(path.work, 'consensus/', sep = '')
path.out = paste(path.work, 'out/', sep = '')
path.figures = paste(path.work, 'figures/', sep = '')
if (!dir.exists(path.out))  dir.create(path.out)  # Check if the directory exists
if (!dir.exists(path.figures))  dir.create(path.figures)  # Check if the directory exists
n.chr = 5
ref.acc = '0'
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
pdf(paste(path.figures, 'pairwise_pan_acc.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
c.red = '#872341'
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.red, alpha = 0.5)
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.red, alpha = 0.5)
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.red, alpha = 0.5) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
pdf(paste(path.figures, 'pairwise_pan_acc.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.grey, alpha = 0.2) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
c.red = '#872341'
c.grey = '#B0A695'
ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.grey, alpha = 0.2) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
c.grey = '#EBEBEB'
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
p.list = list()
idx = seq(1, pan.len, 10000)
for(acc in accessions){
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.grey, ) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
p.list[[acc]] = p
}
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
pdf(paste(path.figures, 'pairwise_pan_acc.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
# Set chromosome index and setup the corresponding MSA file
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
# Read group information from the MSA file and extract accession names and pangenome length
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
# Create plots for each accession
p.list = list()
idx.step = 10000
idx = seq(1, pan.len, idx.step)
for(acc in accessions){
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc)), color=as.factor(sign(acc))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL)
# Save
p.list[[acc]] = p
}
# Combine all plots and display
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
# Save the combined plot to a PDF file
pdf(paste(path.figures, 'pairwise_pan_acc_chr_',i.chr,'.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
unique(as.factor(sign(v.acc$acc)))
# Set chromosome index and setup the corresponding MSA file
i.chr = 1
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
# Read group information from the MSA file and extract accession names and pangenome length
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
# Create plots for each accession
p.list = list()
idx.step = 10000
idx = seq(1, pan.len, idx.step)
for(acc in accessions){
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome", y = acc, title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none")
# Save
p.list[[acc]] = p
}
# Combine all plots and display
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
# Save the combined plot to a PDF file
pdf(paste(path.figures, 'pairwise_pan_acc_chr_',i.chr,'.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
# Set chromosome index and setup the corresponding MSA file
i.chr = 4
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
# Read group information from the MSA file and extract accession names and pangenome length
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
# Create plots for each accession
p.list = list()
idx.step = 10000
idx = seq(1, pan.len, idx.step)
for(acc in accessions){
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord", y = acc, title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none")
# Save
p.list[[acc]] = p
}
# Combine all plots and display
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
# Save the combined plot to a PDF file
pdf(paste(path.figures, 'pairwise_pan_acc_chr_',i.chr,'.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord", y = acc, title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6,
labels = axis.breaks)
axis.breaks = seq(0, 30, by = 5)
ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord", y = acc, title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6,
labels = axis.breaks)
# Set chromosome index and setup the corresponding MSA file
i.chr = 4
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
# Read group information from the MSA file and extract accession names and pangenome length
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
# Create plots for each accession
p.list = list()
axis.breaks = seq(0, 30, by = 5)
idx.step = 10000
idx = seq(1, pan.len, idx.step)
for(acc in accessions){
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord, Mbp",
y = paste(acc, ', Mbp', sep = ''),
title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks) +
scale_x_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks)
# Save
p.list[[acc]] = p
}
# Combine all plots and display
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
# Save the combined plot to a PDF file
pdf(paste(path.figures, 'pairwise_pan_acc_chr_',i.chr,'.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
# Set chromosome index and setup the corresponding MSA file
i.chr = 5
file.msa = paste(path.cons, 'msa_', i.chr, '_', i.chr, '_ref_',ref.acc,'.h5', sep = '')
# Read group information from the MSA file and extract accession names and pangenome length
groups = h5ls(file.msa)
accessions = groups$name[groups$group == gr.accs.b]
pan.len = unique(groups$dim[groups$group == gr.accs.b])
if(length(pan.len) != 1) stop('Something is wrong in the alignment')
# Create plots for each accession
p.list = list()
axis.breaks = seq(0, 30, by = 5)
idx.step = 10000
idx = seq(1, pan.len, idx.step)
for(acc in accessions){
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord, Mbp",
y = paste(acc, ', Mbp', sep = ''),
title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks) +
scale_x_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks)
# Save
p.list[[acc]] = p
}
# Combine all plots and display
p.combo <- plot_grid(plotlist = p.list, ncol = 3)
p.combo
# Save the combined plot to a PDF file
pdf(paste(path.figures, 'pairwise_pan_acc_chr_',i.chr,'.pdf', sep = ''), width = 8, height = 4)
print(p.combo)
dev.off()
plotPanAcc <- function(file.msa, acc){
# Setup
gr.accs.e <- "accs/"
axis.breaks = seq(0, 30, by = 5)
idx.step = 10000
idx = seq(1, pan.len, idx.step)
c.red = '#872341'
c.grey = '#EBEBEB'
# Read the correpondence for one accession
v.acc = h5read(file.msa, paste(gr.accs.e, 'acc_', acc, sep = ''))
v.acc = data.frame(pan = idx, acc = v.acc[idx])
v.acc = v.acc[v.acc$acc != 0,]
# Generate a ggplot for each accession
p = ggplot(v.acc, aes(x = pan, y = abs(acc), color=as.factor(sign(acc)))) +
geom_abline(slope = 1, intercept = 0, color = c.grey) +
geom_point(size = 0.01) +
theme_minimal() +
labs(x = "Pangenome coord, Mbp",
y = paste(acc, ', Mbp', sep = ''),
title = NULL) +
scale_color_manual(values = c("-1" = c.red, "1" = "black")) +
theme(legend.position = "none") +
scale_y_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks) +
scale_x_continuous(breaks = axis.breaks * 10^6, labels = axis.breaks)
return(p)
}
library(ggplot2)
library(cowplot)
library(rhdf5)
path.pannagram = '../../pannagram/'
source(paste(path.pannagram, 'utils.R', sep = ''))
source(paste(path.pannagram, 'visualisation.R', sep = ''))
