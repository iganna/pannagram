gff = gff[order(gff$V1),]
is.unsorted(gff$idx.sort)
which(diff(gff$idx.sort) != 1)
gff$idx.sort = NULL
gff$idx = 1:nrow(gff)
# Length
gff$len = gff$V5 - gff$V4 + 1
gff$chr = as.numeric(gsub('Chr', '', gff$V1))
unique(gff$V3)
idx.LTR <- grep("LTR", gff$V3)
gff = gff[idx.LTR,]
genome = readFastaMy(file.genome)
genome.list = list()
for(i.chr in 1:length(genome)){
genome.list[[i.chr]] = seq2nt(genome[i.chr])
}
pokaz('Chromosome lengths:', unname(nchar(genome)))
seqs.all = c()
for(i.chr in 1:5){
s.chr = genome.list[[i.chr]]
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
seqs = c()
for(irow in 1:nrow(gff.chr)){
seqs[irow] = nt2seq(s.chr[gff.chr$V4[irow]:gff.chr$V5[irow]])
}
names(seqs) = paste(gff.chr$id, gff.chr$V1,sep = '|')
names(seqs) = gff.chr$id
seqs.all = c(seqs.all, seqs)
}
# writeFastaMy(seqs.all, '../data/te_tair12_filter.fasta')
gff$dist = c(gff$V4[-1] - gff$V5[-nrow(gff)], 0)
# Distances between Chromosomes set to Inf
gff$dist[which(gff$V1[-1] != gff$V1[-nrow(gff)])] = Inf
# Number of overlapping hits
n.over = sum(gff$dist < 0)
pokaz('Number of overlaps:', n.over)
idx.over = head(which(gff$dist < 0))
# Check some overlaps
i.over = idx.over[2]
gff[i.over+c(-2:2),]
p = ggplot(gff, aes(x = dist)) +
geom_histogram(binwidth = 500, fill = "blue", color = "black") +
labs(title = "Distance between hist", x = "dist", y = "freq") +
theme_minimal()  + xlim(c(1, 10000))
p
len.gap = 1000
seqs.merge = c()
for(i.chr in 1:5){
pokaz('Chromosome', i.chr)
s.chr = genome.list[[i.chr]]
gff.chr = gff[gff$V1 == paste('Chr', i.chr, sep = ''),]
idx.merge = which(gff.chr$dist <= len.gap)
idx.merge = setdiff(idx.merge, nrow(gff.chr))
pokaz('Number of merged hits:', length(idx.merge))
seqs = c()
for(i.merge in idx.merge){
pos1 = gff.chr$V4[i.merge]
pos2 = gff.chr$V5[i.merge+1]
if(pos2 < pos1) stop('Wrong positions')
if(pos2 - pos1 > 50000) stop('length is too long')
seqs = c(seqs, nt2seq(s.chr[pos1:pos2]))
}
# Names
names(seqs) = paste0('te_merge|',
gff.chr$idx[idx.merge], '|',
gff.chr$V1[idx.merge],'|',
gff.chr$V4[idx.merge],'|',
gff.chr$V5[idx.merge+1],'|',
nchar(seqs))
seqs.merge = c(seqs.merge, seqs)
}
# Show for testing
# gff.chr[i.merge + (-1:1),]
hist(nchar(seqs.merge), 10)
writeFastaMy(seqs.merge, '../data/te_tair12_merged_ltr.fasta')
head(gff)
names(seqs.merge)
max(nchar(seqs.merge))
x = readRDS('../data/result.rds')
x$fam1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][3])
x$fam8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][3])
x$sub1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][2])
x$sub8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][2])
y = x[(x$p1 > 0.85) & (x$p8 > 0.85),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
sum(cnt) / 2
idx.mu = (y$comb == 'classification=DNA/Helitron|classification=LINE/L1') | (y$comb == 'DNA/MULE-MuDR|DNA/Mutator')
y.mu = y[idx.mu,]
y.mu
y.tmp = y.mu[y.mu$sub1 == y.mu$sub8,]
y.tmp
y.tmp = y.mu[y.mu$sub1 != y.mu$sub8,]
y.tmp
irow = 1
s1 = seqs.all[y.tmp$V1[irow]]
s2 = seqs.all[y.tmp$V2[irow]]
dotplot.s(s1, s2, 15, 14)
s2 = seqs.all[y.tmp$V2[irow]]
s2
file.gff = '../data/GCA_028009825.2_Col-CC_genomic.fna.mod.EDTA.TEanno.clean.rename.gff3'
x = read.table(file.gff, stringsAsFactors = F)
x = x[x$V3 != 'centromeric_repeat',]
table(x$V3)
unique(x$V1)
x$id = sapply(x$V9, function(s){
res = strsplit(s, ';')[[1]]
res = paste0(res[1:3], collapse = '|')
res = gsub('ID=', '', res)
res = gsub('Name=', '', res)
res = gsub('Classification=', '', res)
return(res)
}  )
dim(x)
x = x[x$V3 != 'repeat_region',]
idx.contains <- grepl("Parent", x$V9)
x = x[!idx.contains,]
idx.contains <- grepl("rDNA", x$V9)
x = x[!idx.contains,]
file.genome = '../data/GCA_028009825.2_Col-CC_genomic.fna'
genome = readFastaMy(file.genome)
nchar(genome)
names(genome)
seqs.all = c()
for(i.chr in 1:5){
s.chr = seq2nt(genome[i.chr])
gff.chr = x[x$V1 == paste('Chr', i.chr, sep = ''),]
seqs = c()
for(irow in 1:nrow(gff.chr)){
seqs[irow] = nt2seq(s.chr[gff.chr$V4[irow]:gff.chr$V5[irow]])
}
names(seqs) = paste(gff.chr$id, gff.chr$V1,sep = '|')
names(seqs) = gff.chr$id
seqs.all = c(seqs.all, seqs)
}
idx.mu = (y$comb == 'classification=DNA/Helitron|classification=LINE/L1') | (y$comb == 'DNA/MULE-MuDR|DNA/Mutator')
y.mu = y[idx.mu,]
y.tmp = y.mu[y.mu$sub1 == y.mu$sub8,]
length(unique(c(y.tmp$V1, y.tmp$V8)))
s1 = seqs.all['TE_homo_98277|VANDAL4|DNA/MULE-MuDR']
s2 = seqs.all['TE_homo_81022|VANDAL4|DNA/Mutator']
dotplot.s(s1, s2, 15, 14)
idx.mu = (y$comb == 'classification=DNA/Helitron|classification=LINE/L1') | (y$comb == 'DNA/MULE-MuDR|DNA/Mutator')
y.mu = y[idx.mu,]
y.tmp = y.mu[y.mu$sub1 != y.mu$sub8,]
length(unique(c(y.tmp$V1, y.tmp$V8)))
irow = 1
s1 = seqs.all[y.tmp$V1[irow]]
s2 = seqs.all[y.tmp$V2[irow]]
dotplot.s(s1, s2, 15, 14)
s1
s2
y.tmp$V2[irow]
irow = 1
s1 = seqs.all[y.tmp$V1[irow]]
s2 = seqs.all[y.tmp$V8[irow]]
dotplot.s(s1, s2, 15, 14)
y
irow = 2
s1 = seqs.all[y.tmp$V1[irow]]
s2 = seqs.all[y.tmp$V8[irow]]
dotplot.s(s1, s2, 15, 14)
head(y.tmp)
View(y.tmp)
y.problem = y[y$sub1 != y$sub8,]
View(y.problem)
y = x[(x$p1 > 0.85) & (x$p8 > 0.85),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
x = readRDS('../data/result.rds')
x$fam1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][3])
x$fam8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][3])
x$sub1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][2])
x$sub8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][2])
y = x[(x$p1 > 0.85) & (x$p8 > 0.85),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
View(y)
x = readRDS('../data/result.rds')
x$sub1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][3])
x$sub8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][3])
x$fam1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][2])
x$fam8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][2])
y = x[(x$p1 > 0.85) & (x$p8 > 0.85),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
idx.mu = (y$comb == 'HELITRONY2|HELITRON2 ')
y.mu = y[idx.mu,]
y.mu
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.mu = y[idx.mu,]
y.mu
rm(y.mu)
rm(y.tmp)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.example = y[idx.mu,]
rm(y.example)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 2
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 14)
y.ex
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 2
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 14)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 3
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 14)
dotplot.s(s1, s2, 15, 13)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 1
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 13)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 2
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 13)
dotplot.s(s1, s2, 15, 12)
idx.mu = (y$comb == 'HELITRONY2|HELITRON2')
y.ex = y[idx.mu,]
irow = 4
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 12)
y.ex
idx.mu = (y$comb == 'TE_00000163_INT|TE_00000150_INT')
y.ex = y[idx.mu,]
irow = 4
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 12)
idx.mu = (y$comb == 'TE_00000163_INT|TE_00000150_INT')
y.ex = y[idx.mu,]
irow = 4
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 15)
idx.mu = (y$comb == 'TE_00000163_INT|TE_00000150_INT')
y.ex = y[idx.mu,]
irow = 4
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 13)
idx.mu = (y$comb == 'TE_00000163_INT|TE_00000150_INT')
y.ex = y[idx.mu,]
irow = 4
s1 = seqs.all[y.ex$V1[irow]]
s2 = seqs.all[y.ex$V8[irow]]
dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
View(y.ex)
idx.target = (y$comb == 'ATCOPIA26_I-int|ATCOPIN_I-int')
y.target = y[idx.target,]
irow = 4
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 12)
y.target
idx.target = (y$comb == 'ATCOPIA26_I-int|ATCOPIN_I-int')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
sum(cnt) / 2
cnt
dim(y)
s.name = 'te_merge|9486|Chr3|12621733|12627264|5532'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
dotplot.s(seqs.merge['te_merge403|Chr5|14905900|14915521|9622'],
seqs.merge['te_merge405|Chr5|14915522|14925144|9623'], 15, 12)
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[(y$fam1 == y$fam8) & (y$sub1 == y$sub8),]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[(y$fam1 == y$fam8) & (y$sub1 == y$sub8),]
y$comb = paste(y$fam1, y$sub1, y$sub8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[(y$fam1 == y$fam8) & (y$sub1 != y$sub8),]
y$comb = paste(y$fam1, y$sub1, y$sub8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
idx.target = (y$comb == 'BRODYAGA2|classification=DNA/Mutator|classification=DNA/unknown')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 13)
dotplot.s(s1, s2, 15, 14)
idx.target = (y$comb == 'BRODYAGA2|classification=DNA/Mutator|classification=DNA/unknown')
y.target = y[idx.target,]
irow = 2
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 14)
idx.target = (y$comb == 'BRODYAGA1A|classification=DNA/Mutator|classification=DNA/unknown')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 14)
dotplot.s(s1, s2, 15, 12)
s.name = 'te_merge|16850|Chr5|12590938|12599238|8301'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 12)
s.name = 'te_merge|16850|Chr5|12590938|12599238|8301'
dotplot.s(seqs.merge[s.name], seqs.merge[s.name], 15, 14)
hist(nchar(seqs.merge), 50)
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
View(x)
idx.target = (y$comb == ' TE_00000163_INT|TE_00000150_INT ')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
# dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
s1
file.genome = '../data/GCA_028009825.2_Col-CC_genomic.fna'
genome = readFastaMy(file.genome)
nchar(genome)
names(genome)
seqs.all = c()
for(i.chr in 1:5){
s.chr = seq2nt(genome[i.chr])
gff.chr = x[x$V1 == paste('Chr', i.chr, sep = ''),]
seqs = c()
for(irow in 1:nrow(gff.chr)){
seqs[irow] = nt2seq(s.chr[gff.chr$V4[irow]:gff.chr$V5[irow]])
}
names(seqs) = paste(gff.chr$id, gff.chr$V1,sep = '|')
names(seqs) = gff.chr$id
seqs.all = c(seqs.all, seqs)
}
path.base = '../../../'
path.pannagram = paste(path.base, 'pannagram/', sep = '')
source(paste(path.pannagram, 'sim/sim_func.R', sep = ''))
source(paste(path.pannagram, 'analys/graph_func.R', sep = ''))
source(paste(path.pannagram, 'utils/utils.R', sep = ''))
source(paste(path.pannagram, 'visualisation/dotplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/msaplot.R', sep = ''))
source(paste(path.pannagram, 'visualisation/orfplot.R', sep = ''))
library(ggplot2)
file.gff = '../data/GCA_028009825.2_Col-CC_genomic.fna.mod.EDTA.TEanno.clean.rename.gff3'
x = read.table(file.gff, stringsAsFactors = F)
x = x[x$V3 != 'centromeric_repeat',]
table(x$V3)
unique(x$V1)
x$id = sapply(x$V9, function(s){
res = strsplit(s, ';')[[1]]
res = paste0(res[1:3], collapse = '|')
res = gsub('ID=', '', res)
res = gsub('Name=', '', res)
res = gsub('Classification=', '', res)
return(res)
}  )
dim(x)
x = x[x$V3 != 'repeat_region',]
idx.contains <- grepl("Parent", x$V9)
x = x[!idx.contains,]
idx.contains <- grepl("rDNA", x$V9)
x = x[!idx.contains,]
file.genome = '../data/GCA_028009825.2_Col-CC_genomic.fna'
genome = readFastaMy(file.genome)
nchar(genome)
names(genome)
seqs.all = c()
for(i.chr in 1:5){
s.chr = seq2nt(genome[i.chr])
gff.chr = x[x$V1 == paste('Chr', i.chr, sep = ''),]
seqs = c()
for(irow in 1:nrow(gff.chr)){
seqs[irow] = nt2seq(s.chr[gff.chr$V4[irow]:gff.chr$V5[irow]])
}
names(seqs) = paste(gff.chr$id, gff.chr$V1,sep = '|')
names(seqs) = gff.chr$id
seqs.all = c(seqs.all, seqs)
}
writeFastaMy(seqs.all, '../data/te_tair12_filter_02.fasta')
x = readRDS('../data/result.rds')
x$sub1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][3])
x$sub8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][3])
x$fam1 = sapply(x$V1, function(s) strsplit(s, '\\|')[[1]][2])
x$fam8 = sapply(x$V8, function(s) strsplit(s, '\\|')[[1]][2])
sim.cutoff = 0.85
sim.cutoff = 0.95
y = x[(x$p1 > sim.cutoff) & (x$p8 > sim.cutoff),]
y = y[y$fam1 != y$fam8,]
y$comb = paste(y$fam1, y$fam8, sep = '|')
cnt = table(y$comb)
cnt = cnt[order(names(cnt))]
cnt = sort(cnt)
cnt
idx.target = (y$comb == ' TE_00000163_INT|TE_00000150_INT ')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
# dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
idx.target = (y$comb == ' TE_00000163_INT|TE_00000150_INT')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
# dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
idx.target = (y$comb == 'TE_00000163_INT|TE_00000150_INT')
y.target = y[idx.target,]
irow = 1
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
# dotplot.s(s1, s2, 15, 12)
dotplot.s(s1, s2, 15, 14)
dotplot.s(s1, s2, 15, 10)
dotplot.s(s1, s2, 15, 14)
y.target$V1[irow]
y.target$V8[irow]
dotplot.s(s1, s2, 15, 15)
dotplot.s(s1, s2, 15, 14)
nchar(s1)
nchar(s2)
mx = aln2mx(c(s1, s2))
msaplot(mx)
View(x)
idx.target = (y$comb == 'ARNOLD1|ARNOLD2')
y.target = y[idx.target,]
irow = 4
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 12)
idx.target = (y$comb == 'ARNOLD1|ARNOLD2')
y.target = y[idx.target,]
irow = 4
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 15)
idx.target = (y$comb == 'ARNOLD1|ARNOLD2')
y.target = y[idx.target,]
irow = 4
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 14)
idx.target = (y$comb == 'ATGP2_LTR|ATHILA2_LTR')
y.target = y[idx.target,]
irow = 4
s1 = seqs.all[y.target$V1[irow]]
s2 = seqs.all[y.target$V8[irow]]
dotplot.s(s1, s2, 15, 14)
